# name: CI/CD Pipeline

# # Trigger the pipeline on push to the main branch
# on:
#   push:
#     branches:
#       - main  # Change this to your main branch name

# jobs:
#   build:
#     runs-on: ubuntu-latest  # GitHub-hosted runner with Ubuntudfghjhfg

#     steps:
#     # Step 1: Checkout the repository
#     - name: Checkout repository
#       uses: actions/checkout@v2

#     # Step 2: Set up Docker
#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v1

#     # Step 3: Log in to Docker Hub
#     - name: Log in to Docker Hub
#       uses: docker/login-action@v2
#       with:
#         username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username stored in GitHub secrets
#         password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password stored in GitHub secrets

#     # Step 4: Build Docker image----
#     - name: Build Docker image
#       run: |
#         docker build -t soniamohan/siansawebserver:latest .

#     # Step 5: Push Docker image to Docker Hub
#     - name: Push Docker image to Docker Hub
#       run: |
#         docker push soniamohan/siansawebserver:latest

#   deploy:
#     runs-on: ubuntu-latest  # GitHub-hosted runner with Ubuntu
#     needs: build  # This job runs only addfter the "build" job is successful
#     steps:
#       # Step 1: Checkout the repository again
#       - name: Checkout repository
#         uses: actions/checkout@v2

#       # Step 2: Set up AWS CLI
#       - name: Set up AWS CLI
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS Access Key (stored in GitHub secrets)
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS Secret Access Key (stored in GitHub secrets)
#           aws-region: "eu-west-1"  # Your AWS region
#           audience: "sts.amazonaws.com"

#       # Step 3: SSH intwwo EC2 instance and deploy Docker container
#       - name: Deploy to EC2 instance
#         run: |
#           echo "Deploying to EC2 instance"
#           ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_PRIVATE_KEY }} ubuntu@your-ec2-public-ip << 'EOF'
#             # Pull the latest Docker image
#             docker pull soniamohan24/siansawebserver:latest
#             # Stop and remove any old container
#             docker stop siansawebserver-container || true
#             docker rm siansawebserver-container || true
#             # Run the new container
#             docker run -d --name siansawebserver-container -p 8080:8080 soniamohan24/siansawebserver:latest
#           EOF
name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger the pipeline on push to the main branch

jobs:
  build:
    runs-on: ubuntu-latest  # GitHub-hosted runner with Ubuntu

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}

      - name: Build Docker image
        run: |
          docker build -t siansawebserver-image:latest .

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push siansawebserver-image:latest

      - name: Deploy to EC2
        run: |
          ssh -i ${{ secrets.EC2_PRIVATE_KEY }} ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            docker pull siansawebserver-image:latest
            docker stop siansawebserver-container || true
            docker rm siansawebserver-container || true
            docker run -d --name siansawebserver-container -p 8080:8080 myasiansawebserver-image:latest
          EOF
