name: Build, Push Docker Image, and Deploy to AWS

on:
  push:
    branches:
      - main  # Trigger workflow on push to main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t soniamohan/siansawebserver-image:latest -f Dockerfile .

      # Step 4: Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push soniamohan/siansawebserver-image:latest

      # Step 5: Commit and Push Changes (if any)
      - name: Commit changes to GitHub
        run: |
          git config --global user.email "soniamohan.ie@gmail.com"
          git config --global user.name "soniamohan24"
          git add .
          git commit -m "Auto-update CI/CD configuration" || echo "No changes to commit"
          git push https://${{ secrets.GITHUB_TOKEN }}@github.com/soniamohan24/siansiansaWebServer.git HEAD:main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 6: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "eu-west-1"

      # Step 7: Deploy to AWS EC2
      - name: Deploy to AWS EC2
        run: |
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > /tmp/id_rsa
          chmod 600 /tmp/id_rsa
          ssh -o StrictHostKeyChecking=no -i /tmp/id_rsa ubuntu@18.201.46.129 "\
            cd /home/ubuntu/siansaWebServer && \
            git pull origin main && \
            docker-compose down && \
            docker-compose up -d"
        env:
          AWS_SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
